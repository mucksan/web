<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>APIトレンド 分析レポート</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <!-- Chosen Palette: Calm Neutrals -->
    <!-- Application Structure Plan: A tab-based navigation SPA is chosen to organize the content into three distinct, digestible themes: 1) API Trends, 2) Suitability Analysis, and 3) Alternative Patterns. This structure allows users to explore topics non-linearly according to their interests, which is more user-friendly than a long, scrolling document. The main interaction is switching between these tabs. The 'Trends' section uses an interactive radar chart for multi-dimensional comparison, while other sections use clear, structured cards and simple diagrams for intuitive understanding. This design prioritizes clarity and user-guided exploration. -->
    <!-- Visualization & Content Choices: 
        1. API Trends Comparison: Report Info -> Relative strengths of REST, gRPC, GraphQL, WebSocket. Goal -> Compare. Viz/Presentation -> Radar Chart (Chart.js Canvas) to show multi-faceted strengths (performance, flexibility, etc.) at a glance. Interaction -> Buttons to toggle API data on the chart for focused comparison. Justification -> Superior to a simple bar chart for multi-dimensional analysis.
        2. API Suitability: Report Info -> Scenarios where APIs are suitable vs. unsuitable. Goal -> Inform/Compare. Viz/Presentation -> Two-column layout with cards (HTML/CSS) for a direct side-by-side comparison. Justification -> Simple, clear, and highly readable.
        3. Alternative Patterns: Report Info -> How File Transfer, Message Queuing, etc., work. Goal -> Organize/Explain a process. Viz/Presentation -> Simple flow diagrams built with HTML/Tailwind divs and flexbox to visualize data flow without images. Justification -> Avoids forbidden SVG/Mermaid, provides a clear visual aid that's easier to grasp than text alone. -->
    <!-- CONFIRMATION: NO SVG graphics used. NO Mermaid JS used. -->
    <style>
        body {
            font-family: 'Hiragino Kaku Gothic ProN', 'Meiryo', sans-serif;
        }
        .tab-active {
            border-color: #3b82f6;
            background-color: #eff6ff;
            color: #1e40af;
        }
        .tab-inactive {
            border-color: transparent;
            color: #4b5563;
        }
        .content-section {
            display: none;
        }
        .content-section.active {
            display: block;
        }
        .chart-container {
            position: relative;
            width: 100%;
            max-width: 600px;
            margin-left: auto;
            margin-right: auto;
            height: 50vh;
            max-height: 450px;
        }
    </style>
</head>
<body class="bg-stone-50 text-stone-800">

    <div class="container mx-auto p-4 md:p-8">
        
        <header class="text-center mb-8">
            <h1 class="text-3xl md:text-4xl font-bold text-sky-800">APIトレンド 分析レポート</h1>
            <p class="mt-2 text-stone-600">主要なAPI技術の動向、システム連携における適性、および代替案を解説します。</p>
        </header>

        <nav class="flex justify-center border-b border-stone-200 mb-8 space-x-2 md:space-x-4" aria-label="Tabs">
            <button id="tab-btn-trends" class="tab-btn text-sm md:text-base font-medium py-3 px-4 border-b-2 transition-colors duration-200 ease-in-out">📈 APIトレンド</button>
            <button id="tab-btn-suitability" class="tab-btn text-sm md:text-base font-medium py-3 px-4 border-b-2 transition-colors duration-200 ease-in-out">🎯 適材適所</button>
            <button id="tab-btn-alternatives" class="tab-btn text-sm md:text-base font-medium py-3 px-4 border-b-2 transition-colors duration-200 ease-in-out">🧩 代替パターン</button>
        </nav>

        <main>
            <section id="content-trends" class="content-section">
                <div class="text-center mb-8">
                    <h2 class="text-2xl font-bold text-stone-700">主要API技術の比較</h2>
                    <p class="mt-2 text-stone-500 max-w-2xl mx-auto">現在、単一の「主流」技術は存在せず、用途に応じて最適なものを選択する「適材適所」の時代です。下のチャートは、各技術の特性を比較したものです。</p>
                </div>
                
                <div class="chart-container mb-8">
                    <canvas id="apiRadarChart"></canvas>
                </div>

                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div class="bg-white p-6 rounded-lg shadow-md border border-stone-200">
                        <h3 class="text-xl font-bold text-sky-700">REST (Representational State Transfer)</h3>
                        <p class="mt-2 text-stone-600"><strong>現状のデファクトスタンダード。</strong>HTTP(S)をベースにしており、シンプルで理解しやすいため、Web上の公開APIで広く採用されています。ステートレスな原則が特徴です。</p>
                        <ul class="mt-4 space-y-2 text-sm">
                            <li class="flex items-start"><span class="text-green-500 mr-2">✔</span><span><strong>利点:</strong> 広く普及、シンプル、キャッシュ利用可能。</span></li>
                            <li class="flex items-start"><span class="text-orange-500 mr-2">✘</span><span><strong>欠点:</strong> 過剰/過小なデータ取得、多数のリクエストが必要になる場合がある。</span></li>
                        </ul>
                    </div>
                    <div class="bg-white p-6 rounded-lg shadow-md border border-stone-200">
                        <h3 class="text-xl font-bold text-sky-700">GraphQL (Graph Query Language)</h3>
                        <p class="mt-2 text-stone-600"><strong>フロントエンドの要求に応える新星。</strong>クライアントが必要なデータ構造をクエリで指定できるため、RESTのデータ取得問題を解決します。モバイルアプリや複雑なSPAで人気が急上昇中です。</p>
                        <ul class="mt-4 space-y-2 text-sm">
                            <li class="flex items-start"><span class="text-green-500 mr-2">✔</span><span><strong>利点:</strong> データ取得の効率化、単一エンドポイント、強力な型システム。</span></li>
                            <li class="flex items-start"><span class="text-orange-500 mr-2">✘</span><span><strong>欠点:</strong> キャッシュが複雑、学習コストがやや高い。</span></li>
                        </ul>
                    </div>
                    <div class="bg-white p-6 rounded-lg shadow-md border border-stone-200">
                        <h3 class="text-xl font-bold text-sky-700">gRPC (gRPC Remote Procedure Call)</h3>
                        <p class="mt-2 text-stone-600"><strong>マイクロサービス間の高速通信の覇者。</strong>HTTP/2とProtocol Buffersを基盤とし、非常に高性能で低遅延な通信を実現します。内部システム間の連携で主流となっています。</p>
                        <ul class="mt-4 space-y-2 text-sm">
                            <li class="flex items-start"><span class="text-green-500 mr-2">✔</span><span><strong>利点:</strong> 圧倒的なパフォーマンス、ストリーミング対応、厳密なスキーマ定義。</span></li>
                            <li class="flex items-start"><span class="text-orange-500 mr-2">✘</span><span><strong>欠点:</strong> ブラウザからの直接利用が困難、可読性が低い。</span></li>
                        </ul>
                    </div>
                    <div class="bg-white p-6 rounded-lg shadow-md border border-stone-200">
                        <h3 class="text-xl font-bold text-sky-700">WebSocket</h3>
                        <p class="mt-2 text-stone-600"><strong>真のリアルタイム双方向通信。</strong>一度接続を確立すると、サーバーとクライアント間で自由にデータを送りあえる全二重通信を実現します。チャットアプリやライブ配信などで不可欠な技術です。</p>
                         <ul class="mt-4 space-y-2 text-sm">
                            <li class="flex items-start"><span class="text-green-500 mr-2">✔</span><span><strong>利点:</strong> 低遅延な双方向通信、オーバーヘッドが小さい。</span></li>
                            <li class="flex items-start"><span class="text-orange-500 mr-2">✘</span><span><strong>欠点:</strong> 用途が限定的、ステートフルな接続管理が必要。</span></li>
                        </ul>
                    </div>
                </div>
            </section>

            <section id="content-suitability" class="content-section">
                <div class="text-center mb-8">
                    <h2 class="text-2xl font-bold text-stone-700">システム間接続におけるAPIの適性</h2>
                    <p class="mt-2 text-stone-500 max-w-2xl mx-auto">APIは万能ではありません。システム間の連携方法としてAPIが適するケースと、他の手法を検討すべきケースを理解することが重要です。</p>
                </div>
                <div class="grid grid-cols-1 md:grid-cols-2 gap-8">
                    <div class="bg-white p-6 rounded-lg shadow-md border-l-4 border-green-500">
                        <h3 class="text-xl font-bold flex items-center text-green-700">
                            <span class="text-2xl mr-3">✔</span> APIが適するケース
                        </h3>
                        <p class="mt-3 text-stone-600">疎結合なシステム間で、要求に応じてデータをやり取りする場合にAPIは強力です。</p>
                        <ul class="mt-4 space-y-3 list-disc list-inside text-stone-700">
                            <li><strong>リアルタイムなデータ連携:</strong> ユーザー操作などに応じて、即座に他システムのデータ取得や更新が必要な場合。(例: ECサイトでの在庫確認)</li>
                            <li><strong>機能の外部公開:</strong> 自社システムの機能を、パートナー企業や外部開発者に安全に提供したい場合。(例: 地図情報の提供API)</li>
                            <li><strong>多様なクライアントへの対応:</strong> Web、モバイルアプリ、デスクトップアプリなど、複数のフロントエンドから共通のバックエンド機能を利用する場合。</li>
                            <li><strong>マイクロサービスアーキテクチャ:</strong> 小さなサービス群が互いに連携し、一つの大きなアプリケーションとして動作する際のサービス間通信。</li>
                        </ul>
                    </div>
                    <div class="bg-white p-6 rounded-lg shadow-md border-l-4 border-orange-500">
                        <h3 class="text-xl font-bold flex items-center text-orange-700">
                            <span class="text-2xl mr-3">✘</span> APIが適さないケース
                        </h3>
                        <p class="mt-3 text-stone-600">大量のデータを一括で扱ったり、即時性が求められない処理には不向きな場合があります。</p>
                        <ul class="mt-4 space-y-3 list-disc list-inside text-stone-700">
                            <li><strong>大規模な一括データ転送 (バッチ処理):</strong> 夜間に数GBのデータをシステム間で同期するなど、大量のデータを一度に転送する場合。(APIでは効率が悪く、タイムアウトのリスク)</li>
                            <li><strong>非同期的な一方向の通知:</strong> 処理結果を即座に待つ必要がない、投げっぱなしの通知やイベント連携。(例: 注文完了後に非同期でメール送信)</li>
                            <li><strong>共有データへの高頻度な参照:</strong> 分析システムがアプリケーションのデータベース全体を頻繁に参照するなど、データソースが密接に関連している場合。</li>
                            <li><strong>超大量のイベントストリーミング:</strong> IoTデバイスからのセンサーデータなど、毎秒数千・数万件のイベントを継続的に処理する場合。</li>
                        </ul>
                    </div>
                </div>
            </section>

            <section id="content-alternatives" class="content-section">
                <div class="text-center mb-8">
                    <h2 class="text-2xl font-bold text-stone-700">APIが適さない場合の代替パターン</h2>
                    <p class="mt-2 text-stone-500 max-w-2xl mx-auto">APIが不向きなシナリオでは、以下のような連携パターンが有効です。これらは特定の課題を効率的に解決するために設計されています。</p>
                </div>
                <div class="space-y-8">
                    <div class="bg-white p-6 rounded-lg shadow-md border border-stone-200">
                        <h3 class="text-xl font-bold text-sky-700">1. ファイル転送 (バッチ処理)</h3>
                        <p class="mt-2 text-stone-600"><strong>概要:</strong> 大量のデータをファイルとして出力し、共有ストレージを介して受け渡す方法です。夜間バッチなどでよく利用されます。</p>
                        <p class="mt-2 text-sm text-stone-500"><strong>適用ケース:</strong> 大規模なデータ同期、日次・月次処理。</p>
                        <div class="mt-4 bg-stone-50 p-4 rounded-lg">
                            <p class="font-semibold text-stone-700 mb-2">具体的な流れの例 (AWSを利用):</p>
                            <div class="flex flex-col md:flex-row items-center justify-between space-y-4 md:space-y-0 md:space-x-4 text-center text-sm">
                                <div class="flex-1 p-3 bg-white rounded shadow"><strong>システムA</strong><br>CSV/Parquet等でファイル出力</div>
                                <div class="text-sky-600 font-bold text-2xl">→</div>
                                <div class="flex-1 p-3 bg-white rounded shadow"><strong>S3 (ストレージ)</strong><br>ファイルをアップロード</div>
                                <div class="text-sky-600 font-bold text-2xl">→</div>
                                <div class="flex-1 p-3 bg-white rounded shadow"><strong>システムB</strong><br>ファイルをダウンロードして処理</div>
                            </div>
                        </div>
                    </div>

                    <div class="bg-white p-6 rounded-lg shadow-md border border-stone-200">
                        <h3 class="text-xl font-bold text-sky-700">2. メッセージキューイング</h3>
                        <p class="mt-2 text-stone-600"><strong>概要:</strong> システム間で「メッセージ」を仲介するキューを挟むことで、処理を非同期化・分散させる方法です。システムの疎結合化に大きく貢献します。</p>
                        <p class="mt-2 text-sm text-stone-500"><strong>適用ケース:</strong> 非同期処理、負荷の平準化、イベント駆動アーキテクチャ。</p>
                        <div class="mt-4 bg-stone-50 p-4 rounded-lg">
                            <p class="font-semibold text-stone-700 mb-2">具体的な流れの例 (ECサイトの注文処理):</p>
                             <div class="flex flex-col md:flex-row items-center justify-between space-y-4 md:space-y-0 md:space-x-2 text-center text-sm">
                                <div class="flex-1 p-3 bg-white rounded shadow"><strong>注文サービス</strong><br>「注文完了」メッセージを送信</div>
                                <div class="text-sky-600 font-bold text-2xl">→</div>
                                <div class="flex-1 p-3 bg-sky-100 border border-sky-300 rounded shadow"><strong>メッセージキュー</strong><br>(RabbitMQ, SQSなど)</div>
                                <div class="text-sky-600 font-bold text-2xl">→</div>
                                <div class="flex flex-col space-y-2 w-full md:w-auto">
                                    <div class="p-2 bg-white rounded shadow"><strong>在庫サービス</strong></div>
                                    <div class="p-2 bg-white rounded shadow"><strong>配送サービス</strong></div>
                                    <div class="p-2 bg-white rounded shadow"><strong>通知サービス</strong></div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="bg-white p-6 rounded-lg shadow-md border border-stone-200">
                        <h3 class="text-xl font-bold text-sky-700">3. 共有データベース / DBレプリケーション</h3>
                        <p class="mt-2 text-stone-600"><strong>概要:</strong> 複数のシステムが同じデータベースを参照、または読み取り専用の複製(レプリカ)を参照する方法です。密結合になりますが、データアクセスは非常に高速です。</p>
                        <p class="mt-2 text-sm text-stone-500"><strong>適用ケース:</strong> 分析・レポーティング用途、データ参照が主体のシステム連携。</p>
                        <div class="mt-4 bg-stone-50 p-4 rounded-lg">
                           <p class="font-semibold text-stone-700 mb-2">具体的な流れの例 (分析システム):</p>
                             <div class="flex flex-col md:flex-row items-center justify-between space-y-4 md:space-y-0 md:space-x-4 text-center text-sm">
                                <div class="flex-1 p-3 bg-white rounded shadow"><strong>アプリケーションDB</strong><br>(プライマリ)</div>
                                <div class="text-sky-600 font-bold text-2xl">→</div>
                                <div class="flex-1 p-3 bg-white rounded shadow"><strong>読み取り専用レプリカDB</strong><br>データを複製</div>
                                <div class="text-sky-600 font-bold text-2xl">→</div>
                                <div class="flex-1 p-3 bg-white rounded shadow"><strong>分析・BIツール</strong><br>レプリカDBに高速クエリ実行</div>
                            </div>
                        </div>
                    </div>
                </div>
            </section>
        </main>

    </div>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const tabs = [
                { btn: document.getElementById('tab-btn-trends'), content: document.getElementById('content-trends') },
                { btn: document.getElementById('tab-btn-suitability'), content: document.getElementById('content-suitability') },
                { btn: document.getElementById('tab-btn-alternatives'), content: document.getElementById('content-alternatives') },
            ];

            function switchTab(activeIndex) {
                tabs.forEach((tab, index) => {
                    if (index === activeIndex) {
                        tab.btn.classList.add('tab-active');
                        tab.btn.classList.remove('tab-inactive');
                        tab.content.classList.add('active');
                    } else {
                        tab.btn.classList.add('tab-inactive');
                        tab.btn.classList.remove('tab-active');
                        tab.content.classList.remove('active');
                    }
                });
            }

            tabs.forEach((tab, index) => {
                tab.btn.addEventListener('click', () => switchTab(index));
            });

            switchTab(0);

            const ctx = document.getElementById('apiRadarChart').getContext('2d');
            const apiRadarChart = new Chart(ctx, {
                type: 'radar',
                data: {
                    labels: ['パフォーマンス', '柔軟性/拡張性', '普及度/エコシステム', 'リアルタイム性', '学習コスト(低)'],
                    datasets: [
                        {
                            label: 'REST',
                            data: [3, 4, 5, 2, 5],
                            backgroundColor: 'rgba(255, 99, 132, 0.2)',
                            borderColor: 'rgba(255, 99, 132, 1)',
                            borderWidth: 2,
                            pointBackgroundColor: 'rgba(255, 99, 132, 1)'
                        },
                        {
                            label: 'GraphQL',
                            data: [4, 5, 4, 3, 3],
                            backgroundColor: 'rgba(54, 162, 235, 0.2)',
                            borderColor: 'rgba(54, 162, 235, 1)',
                            borderWidth: 2,
                            pointBackgroundColor: 'rgba(54, 162, 235, 1)'
                        },
                        {
                            label: 'gRPC',
                            data: [5, 3, 3, 4, 2],
                            backgroundColor: 'rgba(75, 192, 192, 0.2)',
                            borderColor: 'rgba(75, 192, 192, 1)',
                            borderWidth: 2,
                            pointBackgroundColor: 'rgba(75, 192, 192, 1)'
                        },
                         {
                            label: 'WebSocket',
                            data: [4, 2, 4, 5, 4],
                            backgroundColor: 'rgba(255, 206, 86, 0.2)',
                            borderColor: 'rgba(255, 206, 86, 1)',
                            borderWidth: 2,
                            pointBackgroundColor: 'rgba(255, 206, 86, 1)'
                        }
                    ]
                },
                options: {
                    maintainAspectRatio: false,
                    scales: {
                        r: {
                            angleLines: {
                                color: 'rgba(0, 0, 0, 0.1)'
                            },
                            grid: {
                                color: 'rgba(0, 0, 0, 0.1)'
                            },
                            pointLabels: {
                                font: {
                                    size: 13
                                },
                                color: '#333'
                            },
                            ticks: {
                                beginAtZero: true,
                                max: 5,
                                stepSize: 1,
                                backdropColor: 'rgba(255, 255, 255, 0.75)'
                            }
                        }
                    },
                    plugins: {
                        legend: {
                            position: 'bottom',
                        },
                        tooltip: {
                            enabled: true
                        }
                    }
                }
            });
        });
    </script>

</body>
</html>
